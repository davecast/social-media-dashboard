{"version":3,"sources":["components/header/header.js","components/switch/switch.js","components/card/card.js","components/topcardlist/top-card-list.js","components/card/card-small.js","components/overview/overview.js","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Switch","setDarkMode","checked","setChecked","ref","useRef","htmlFor","id","type","onChange","current","Card","network","username","icon","number","today","cardClass","src","alt","cardListData","TopCardList","map","cardData","index","key","CardSmall","pageViews","growth","cardSmallList","Overview","App","useState","darkMode","mainClass","changeMedia","mq","matches","useEffect","window","matchMedia","addListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83d9a6c5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./header.css\";\r\n\r\nfunction Header({ children }) {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"header__grid\">\r\n          <div className=\"header__info\">\r\n            <h1 className=\"header__title\">Social Media Dashboard</h1>\r\n            <p className=\"header__subtitle\">Total followers: 23,004</p>\r\n          </div>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useRef } from \"react\";\r\nimport \"./switch.css\";\r\n\r\nfunction Switch({ setDarkMode, checked, setChecked }) {\r\n  const ref = useRef(null);\r\n\r\n  function handleChange() {\r\n    setChecked(ref.current.checked);\r\n    setDarkMode(ref.current.checked);\r\n  }\r\n\r\n  return (\r\n    <div className=\"darkmode\">\r\n      <p className=\"darkmode__title\">Dark Mode</p>\r\n      <label htmlFor=\"darkmode\" className=\"darkmode__switch\">\r\n        <input\r\n          ref={ref}\r\n          id=\"darkmode\"\r\n          type=\"checkbox\"\r\n          onChange={handleChange}\r\n          checked={checked}\r\n        />\r\n        <div className=\"darkmode__inner\">\r\n          <div className=\"darkmode__inner--dot\"></div>\r\n        </div>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Switch;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nfunction Card({ network, username, icon, number, today }) {\r\n  const cardClass = `card card--${network}`;\r\n\r\n  return (\r\n    <article className={cardClass}>\r\n      <p className=\"card__social\">\r\n        <img src={icon} alt=\"\" />\r\n        {username}\r\n      </p>\r\n      <p className=\"card__followers\">\r\n        <span className=\"card__number\">{number}</span>\r\n        <span className=\"card__title\">Followers</span>\r\n      </p>\r\n      <p className=\"card__today\">\r\n        <img src=\"img/icon-up.svg\" alt=\"\" />\r\n        {today} Today\r\n      </p>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./top-card-list.css\";\r\n\r\nimport Card from \"../card/card\";\r\n\r\nconst cardListData = [\r\n  {\r\n    username: \"@Davecast\",\r\n    network: \"facebook\",\r\n    number: 52,\r\n    today: 12,\r\n    icon: \"img/icon-facebook.svg\",\r\n  },\r\n  {\r\n    username: \"@Davecast\",\r\n    network: \"twitter\",\r\n    number: 92,\r\n    today: 20,\r\n    icon: \"img/icon-twitter.svg\",\r\n  },\r\n  {\r\n    username: \"@Davecast\",\r\n    network: \"instagram\",\r\n    number: 612,\r\n    today: -1,\r\n    icon: \"img/icon-instagram.svg\",\r\n  },\r\n  {\r\n    username: \"@Davecast\",\r\n    network: \"youtube\",\r\n    number: 0,\r\n    today: 0,\r\n    icon: \"img/icon-youtube.svg\",\r\n  },\r\n];\r\n\r\nfunction TopCardList() {\r\n  return (\r\n    <section className=\"top__cards\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"grid\">\r\n          {cardListData.map((cardData, index) => (\r\n            <Card {...cardData} key={`${cardData.username}_${index}`} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default TopCardList;\r\n","import React from \"react\";\r\nimport \"./card-small.css\";\r\n\r\nfunction CardSmall({ icon, pageViews, growth }) {\r\n  return (\r\n    <article className=\"card card--small\">\r\n      <div className=\"card__area--title\">Page views</div>\r\n      <div className=\"card__area--icon\">\r\n        <img src={icon} alt=\"\" />\r\n      </div>\r\n      <div className=\"card__area--count\">{pageViews}</div>\r\n      <div className=\"card__area--percentage card__area--up\">\r\n        <img src=\"img/icon-up.svg\" alt=\"\" />\r\n        {growth}%\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default CardSmall;\r\n","import React from \"react\";\r\n\r\nimport CardSmall from \"../card/card-small\";\r\n\r\nconst cardSmallList = [\r\n  {\r\n    icon: \"img/icon-facebook.svg\",\r\n    pageViews: \"87\",\r\n    growth: 3,\r\n    id: 1,\r\n  },\r\n  {\r\n    icon: \"img/icon-facebook.svg\",\r\n    pageViews: \"52\",\r\n    growth: 2,\r\n    id: 2,\r\n  },\r\n  {\r\n    icon: \"img/icon-instagram.svg\",\r\n    pageViews: \"5462\",\r\n    growth: 2257,\r\n    id: 3,\r\n  },\r\n  {\r\n    icon: \"img/icon-instagram.svg\",\r\n    pageViews: \"52k\",\r\n    growth: 1375,\r\n    id: 4,\r\n  },\r\n  {\r\n    icon: \"img/icon-twitter.svg\",\r\n    pageViews: \"52k\",\r\n    growth: 303,\r\n    id: 5,\r\n  },\r\n  {\r\n    icon: \"img/icon-twitter.svg\",\r\n    pageViews: \"507\",\r\n    growth: 553,\r\n    id: 6,\r\n  },\r\n  {\r\n    icon: \"img/icon-youtube.svg\",\r\n    pageViews: \"107\",\r\n    growth: 19,\r\n    id: 7,\r\n  },\r\n  {\r\n    icon: \"img/icon-youtube.svg\",\r\n    pageViews: \"1407\",\r\n    growth: 12,\r\n    id: 8,\r\n  },\r\n];\r\n\r\nfunction Overview() {\r\n  return (\r\n    <section className=\"overview\">\r\n      <div className=\"wrapper\">\r\n        <h2 className=\"section--title\">Overview - Today</h2>\r\n        <div className=\"grid\">\r\n          {cardSmallList.map(({ icon, pageViews, growth, id }) => {\r\n            return (\r\n              <CardSmall\r\n                key={id}\r\n                icon={icon}\r\n                pageViews={pageViews}\r\n                growth={growth}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Overview;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./globals.css\";\n\nimport Header from \"./components/header/header\";\nimport Switch from \"./components/switch/switch\";\nimport TopCardList from \"./components/topcardlist/top-card-list\";\nimport Overview from \"./components/overview/overview\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const [checked, setChecked] = useState(false);\n  const mainClass = darkMode ? \"is__darkmode\" : \"is__ligthmode\";\n\n  function changeMedia(mq) {\n    setDarkMode(mq.matches);\n    setChecked(mq.matches);\n  }\n\n  useEffect(() => {\n    const mq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    mq.addListener(changeMedia);\n    setDarkMode(mq.matches);\n    setChecked(mq.matches);\n  }, []);\n\n  return (\n    <main className={mainClass}>\n      <Header>\n        <Switch\n          setDarkMode={setDarkMode}\n          checked={checked}\n          setChecked={setChecked}\n        />\n      </Header>\n      <TopCardList />\n      <Overview />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}